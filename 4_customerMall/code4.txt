import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
-----------------------------------------
df=pd.read_csv('4.csv')
df.head()
-------------------------------------------
df.info()
-------------------------------------
plt.style.use("fivethirtyeight")
plt.figure(1,(15,8))
n=0
for x in ['Age','Annual Income (k$)','Spending Score (1-100)']:
     n+=1
     plt.subplot(1,3,n)
     plt.subplots_adjust (hspace=0.5,wspace=0.5)
     sns.distplot(df[x],bins=40)
plt.show()
--------------------------------------
plt.figure(1,(15,5))
sns.countplot(y="Gender",data=df)
plt.show()
---------------------------------------
plt.style.use("fivethirtyeight")
plt.figure(1,(15,7))
n=0
for x in ['Age','Annual Income (k$)','Spending Score (1-100)']:
   for y in ['Age','Annual Income (k$)','Spending Score (1-100)']:
      n+=1
   plt.subplot(3,3,n)
   plt.subplots_adjust(hspace=0.5,wspace=0.5)
   sns.regplot(x=x,y=y,data=df)
plt.show()
-------------------------------------
df.isnull().sum()
-----------------------------------
df.keys()
--------------------------------------
df.drop_duplicates(inplace=True)
---------------------------------------
df.keys()
-----------------------------------------
plt.scatter(df['Annual Income (k$)'],df['Spending Score (1-100)'])
-----------------------------------------
X=df.iloc[:,[3,4]].values
----------------------------------------
from sklearn.cluster import KMeans
-----------------------------------------
kmeans=KMeans(n_clusters=5,init='k-means++',random_state=42)
y_kmeans=kmeans.fit_predict(X)
---------------------------------------------
sns.scatterplot(x=X[y_kmeans==0,0],y=X[y_kmeans==0,1],color='white',label='Cluster 1')
sns.scatterplot(x=X[y_kmeans==1,0],y=X[y_kmeans==1,1],color='blue',label='Cluster 2')
sns.scatterplot(x=X[y_kmeans==2,0],y=X[y_kmeans==2,1],color='green',label='Cluster 3')
sns.scatterplot(x=X[y_kmeans==3,0],y=X[y_kmeans==3,1],color='black',label='Cluster 4')
sns.scatterplot(x=X[y_kmeans==4,0],y=X[y_kmeans==4,1],color='orange',label='Cluster 5')
sns.scatterplot(x=kmeans.cluster_centers_[:,0],y=kmeans.cluster_centers_[:,1],color='red',label='Centroids',s=300,marker='*')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
-------------------------------------------------
cluster=[]
for k in range (1,11):
   kmean=KMeans(n_clusters=k).fit(X)
   cluster.append(kmean.inertia_)
plt.figure(figsize=(12,8))
plt.plot(range(1,11),cluster,'r-')
plt.xlabel('Inertia')
plt.ylabel('n_cluster')
plt.show()
------------------------------------------------
import matplotlib.pyplot as plt
import pandas as pd
dataset=pd.read_csv('Mall_Customers.csv')
dataset
------------------------------------------------
X=dataset.iloc[:,[3,4]].values
--------------------------------------------------
import scipy.cluster.hierarchy as sch
dendrogram=sch.dendrogram(sch.linkage(X,method='ward'))
plt.title("Dendrogram")
plt.xlabel("Customers")
plt.ylabel("Euclidean Distance")
plt.tick_params(axis='x',labelbottom=False)
plt.show()
------------------------------------------------
from sklearn.cluster import AgglomerativeClustering
-------------------------------------------
hc=AgglomerativeClustering(n_clusters=5,affinity="euclidean",linkage='ward')  #if affinity not working then replace it with metric
y_pred=hc.fit_predict(x)
-----------------------------------
plt.scatter(x[y_pred==0,0],x[y_pred==0,1],s=100,c='red',label='c1')
plt.scatter(x[y_pred==1,0],x[y_pred==1,1],s=100,c='blue',label='c2')
plt.scatter(x[y_pred==2,0],x[y_pred==2,1],s=100,c='green',label='c3')
plt.scatter(x[y_pred==3,0],x[y_pred==3,1],s=100,c='yellow',label='c4')
plt.scatter(x[y_pred==4,0],x[y_pred==4,1],s=100,c='black',label='c5')
plt.title('Clusters of Customers')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.legend()
plt.show()
-------------------------------------
import plotly.figure_factory as ff
import plotly.offline as py
------------------------------------------
data=pd.read_csv('4.csv')
dat=ff.create_table(data.head())
py.iplot(dat)
-----------------------------------------
desc=ff.create_table(data.describe())
py.iplot(desc)
---------------------------------------
plt.rcParams['figure.figsize']=(18,8)
plt.subplot(1,2,1)
sns.set(style='whitegrid')
sns.distplot(data['Annual Income (k$)'])
plt.title('Distribution of Annual Income',fontsize=20)
plt.xlabel('Range of Annual Income')
plt.ylabel('Count')
plt.subplot(1,2,2)
sns.set(style='whitegrid')
sns.distplot(data['Age'],color='red')
plt.title('Distribution of Age',fontsize=20)
plt.xlabel('Range of Age')
plt.ylabel('Count')
plt.show()
----------------------------------------
labels=['Female','Male']
size=data['Gender'].value_counts()
colors=['lightgreen','orange']
explode=[0,0.1]
plt.rcParams['figure.figsize']=(8,8)
plt.pie(size,colors=colors,explode=explode,labels=labels,shadow=True,autopct=None,pctdistance=0.6,labeldistance=1.1)
plt.title('Gender',fontsize=20)
plt.axis('off')
plt.legend()
plt.show()
------------------------------------------
plt.rcParams['figure.figsize']=(15,8)
sns.countplot(data['Age'],palette='hsv') #if error is shown then,(x='Age', data=df, palette='hsv')
plt.title('Distribution of Age',fontsize=20)
plt.show()
------------------------------------------------
plt.rcParams['figure.figsize']=(20,8)
sns.countplot(data['Annual Income (k$)'],palette='rainbow') #if error is showing then,(x='Annual Income (k$)', data=df, palette='rainbow')
plt.title('Distribution of Annual Income',fontsize=20)
plt.show()
------------------------------------------------
plt.rcParams['figure.figsize']=(20,8)
sns.countplot(data['Spending Score (1-100)'],palette='copper') #if error is showing then,(x='Spending Score (1-100)', data=df, palette='copper')
plt.title('Distribution of Spending Score',fontsize=20)
plt.show()
----------------------------------------------------
sns.pairplot(data)
plt.title('Pairplot for the Data',fontsize=20)
plt.show()
------------------------------------------------
x=data['Annual Income (k$)']
y=data['Age']
z=data['Spending Score (1-100)']
sns.lineplot(x=x,y=y,color='blue')
sns.lineplot(x=x,y=z,color='pink')
plt.title('Annual Income vs Age and Spending Score',fontsize=20)
plt.show()
